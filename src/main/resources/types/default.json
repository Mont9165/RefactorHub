[
  {
    "name": "Non-Refactoring",
    "description": "Non-refactoring changes like feature, bug fix",
    "referenceUrl": "",
    "tags": [],
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "Any Refactoring",
    "description": "Any refactoring",
    "referenceUrl": "",
    "tags": [],
    "before": {},
    "after": {}
  },
  {
    "name": "Extract Method",
    "description": "Extracting a code fragment from existing method, and creating a new method based on the extracted code in the same class",
    "referenceUrl": "https://refactoring.com/catalog/extractFunction.html",
    "tags": ["Extract", "Method"],
    "before": {
      "extracted code": {
        "description": "Code fragment to be extracted",
        "type": "CodeFragment",
        "required": true
      }
    },
    "after": {
      "extracted code": {
        "description": "Code fragment which was extracted",
        "type": "CodeFragment",
        "required": true
      },
      "extracted method": {
        "description": "Method which was newly created by the extraction",
        "type": "MethodDeclaration",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "after",
                "name": "extracted code"
              }
            ],
            "element": "MethodDeclaration"
          }
        ]
      },
      "invocation": {
        "description": "Method invocation by which the extracted code was replaced",
        "type": "MethodInvocation",
        "required": true
      }
    }
  },
  {
    "name": "Move Method",
    "description": "Moving a method to the other class",
    "tags": ["Move", "Method"],
    "before": {
      "moved method": {
        "description": "Method to be moved",
        "type": "MethodDeclaration",
        "required": true
      },
      "references before": {
        "description": "References of the method before moving",
        "type": "MethodInvocation",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "before",
                "name": "moved method"
              }
            ]
          }
        ]
      }
    },
    "after": {
      "moved method": {
        "description": "Method which was moved",
        "type": "MethodDeclaration",
        "required": true
      },
      "references after": {
        "description": "References of the method after moving",
        "type": "MethodInvocation",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "after",
                "name": "moved method"
              }
            ]
          }
        ]
      }
    }
  },
  {
    "name": "Rename Method",
    "description": "Changing the name of a method",
    "tags": ["Rename", "Method"],
    "before": {
      "original method": {
        "description": "Method to be renamed",
        "type": "MethodDeclaration",
        "required": true
      },
      "references before": {
        "description": "References of the method before renaming",
        "type": "MethodInvocation",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "before",
                "name": "original method"
              }
            ]
          }
        ]
      }
    },
    "after": {
      "renamed method": {
        "description": "Method which was renamed",
        "type": "MethodDeclaration",
        "required": true
      },
      "references after": {
        "description": "References of the method after renaming",
        "type": "MethodInvocation",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "after",
                "name": "renamed method"
              }
            ]
          }
        ]
      }
    }
  },
  {
    "name": "Inline Method",
    "description": "Inlining the body of a method to its invocation, and removing the method in the same class",
    "tags": ["Inline", "Method"],
    "before": {
      "inlined code": {
        "description": "Code fragment to be inlined",
        "type": "CodeFragment",
        "required": true
      },
      "inlined method": {
        "description": "Method to be removed by the inlining",
        "type": "MethodDeclaration",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "before",
                "name": "inlined code"
              }
            ],
            "element": "MethodDeclaration"
          }
        ]
      },
      "invocation": {
        "description": "Method invocation to be replaced by inlined code",
        "type": "MethodInvocation",
        "required": true
      }
    },
    "after": {
      "inlined code": {
        "description": "Code fragment which was inlined",
        "type": "CodeFragment",
        "required": true
      }
    }
  },
  {
    "name": "Push Down Method",
    "description": "",
    "tags": ["Push Down", "Method"],
    "before": {
      "target method": {
        "type": "MethodDeclaration",
        "required": true
      }
    },
    "after": {
      "moved method": {
        "type": "MethodDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Pull Up Method",
    "description": "",
    "tags": ["Pull Up", "Method"],
    "before": {
      "target method": {
        "type": "MethodDeclaration",
        "required": true
      }
    },
    "after": {
      "moved method": {
        "type": "MethodDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Extract And Move Method",
    "description": "",
    "tags": ["Extract", "Move", "Method"],
    "before": {
      "extracted code": {
        "type": "CodeFragment",
        "multiple": true,
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    },
    "after": {
      "invocation": {
        "type": "MethodInvocation",
        "required": true
      },
      "extracted code": {
        "type": "CodeFragment",
        "multiple": true,
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      },
      "extracted method": {
        "type": "MethodDeclaration"
      }
    }
  },
  {
    "name": "Move And Inline Method",
    "description": "",
    "tags": ["Move", "Inline", "Method"],
    "before": {
      "invocation": {
        "type": "MethodInvocation",
        "required": true
      },
      "inlined code": {
        "type": "CodeFragment",
        "multiple": true,
        "required": true
      },
      "inlined method": {
        "type": "MethodDeclaration"
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    },
    "after": {
      "inlined code": {
        "type": "CodeFragment",
        "multiple": true,
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    }
  },
  {
    "name": "Move And Rename Method",
    "description": "",
    "tags": ["Move", "Rename", "Method"],
    "before": {
      "target method": {
        "type": "MethodDeclaration",
        "required": true
      }
    },
    "after": {
      "moved method": {
        "type": "MethodDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Extract Attribute",
    "description": "Extracting a code fragment, and creating a new attribute based on the extracted code in the same class",
    "tags": ["Extract", "Attribute"],
    "before": {
      "extracted code": {
        "description": "Code fragment to be extracted",
        "type": "CodeFragment",
        "required": true
      }
    },
    "after": {
      "extracted code": {
        "description": "Code fragment which was extracted",
        "type": "CodeFragment",
        "required": true
      },
      "extracted attribute": {
        "type": "FieldDeclaration",
        "description": "Attribute which was newly created by the extraction",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "after",
                "name": "extracted code"
              }
            ],
            "element": "FieldDeclaration"
          }
        ]
      },
      "reference": {
        "description": "Reference of the attribute by which the extracted code was replaced",
        "type": "SimpleName",
        "required": true
      }
    }
  },
  {
    "name": "Move Attribute",
    "description": "Moving an attribute to the other class",
    "referenceUrl": "https://refactoring.com/catalog/moveField.html",
    "tags": ["Move", "Attribute"],
    "before": {
      "moved attribute": {
        "description": "Attribute to be moved",
        "type": "FieldDeclaration",
        "required": true
      },
      "references before": {
        "description": "References of the attribute before moving",
        "type": "SimpleName",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "before",
                "name": "moved attribute"
              }
            ]
          }
        ]
      }
    },
    "after": {
      "moved attribute": {
        "description": "Attribute which was moved",
        "type": "FieldDeclaration",
        "required": true
      },
      "references after": {
        "description": "References of the attribute after moving",
        "type": "SimpleName",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "after",
                "name": "moved attribute"
              }
            ]
          }
        ]
      }
    }
  },
  {
    "name": "Rename Attribute",
    "description": "Changing the name of an attribute",
    "tags": ["Rename", "Attribute"],
    "before": {
      "original attribute": {
        "description": "Attribute to be renamed",
        "type": "FieldDeclaration",
        "required": true
      },
      "references before": {
        "description": "References of the attribute before renaming",
        "type": "SimpleName",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "before",
                "name": "original attribute"
              }
            ]
          }
        ]
      }
    },
    "after": {
      "renamed attribute": {
        "description": "Attribute which was renamed",
        "type": "FieldDeclaration",
        "required": true
      },
      "references after": {
        "description": "References of the attribute after renaming",
        "type": "SimpleName",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "after",
                "name": "renamed attribute"
              }
            ]
          }
        ]
      }
    }
  },
  {
    "name": "Inline Attribute",
    "description": "Inlining the value of an attribute to its reference, and removing the attribute in the same class",
    "tags": ["Inline", "Attribute"],
    "before": {
      "inlined code": {
        "description": "Code fragment to be inlined",
        "type": "CodeFragment",
        "required": true
      },
      "inlined attribute": {
        "type": "FieldDeclaration",
        "description": "Attribute to be removed by the inlining",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "before",
                "name": "inlined code"
              }
            ],
            "element": "FieldDeclaration"
          }
        ]
      },
      "reference": {
        "description": "Reference of the attribute to be replaced by inlined code",
        "type": "SimpleName",
        "required": true
      }
    },
    "after": {
      "inlined code": {
        "description": "Code fragment which was inlined",
        "type": "CodeFragment",
        "required": true
      }
    }
  },
  {
    "name": "Push Down Attribute",
    "description": "",
    "tags": ["Push Down", "Attribute"],
    "before": {
      "target field": {
        "type": "FieldDeclaration",
        "required": true
      }
    },
    "after": {
      "moved field": {
        "type": "FieldDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Pull Up Attribute",
    "description": "",
    "tags": ["Pull Up", "Attribute"],
    "before": {
      "target field": {
        "type": "FieldDeclaration",
        "required": true
      }
    },
    "after": {
      "moved field": {
        "type": "FieldDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Extract Variable",
    "description": "Extracting a code fragment, and creating a new variable based on the extracted code in the same method",
    "tags": ["Extract", "Variable"],
    "before": {
      "extracted code": {
        "description": "Code fragment to be extracted",
        "type": "CodeFragment",
        "required": true
      }
    },
    "after": {
      "extracted code": {
        "description": "Code fragment which was extracted",
        "type": "CodeFragment",
        "required": true
      },
      "extracted variable": {
        "type": "VariableDeclaration",
        "description": "Variable which was newly created by the extraction",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "after",
                "name": "extracted code"
              }
            ],
            "element": "VariableDeclaration"
          }
        ]
      },
      "reference": {
        "description": "Reference of the variable by which the extracted code was replaced",
        "type": "SimpleName",
        "required": true
      }
    }
  },
  {
    "name": "Rename Variable",
    "description": "Changing the name of a variable",
    "referenceUrl": "https://refactoring.com/catalog/renameVariable.html",
    "tags": ["Rename", "Variable"],
    "before": {
      "original variable": {
        "description": "Variable to be renamed",
        "type": "VariableDeclaration",
        "required": true
      },
      "references before": {
        "description": "References of the variable before renaming",
        "type": "SimpleName",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "before",
                "name": "original variable"
              }
            ]
          }
        ]
      }
    },
    "after": {
      "renamed variable": {
        "description": "Variable which was renamed",
        "type": "VariableDeclaration",
        "required": true
      },
      "references after": {
        "description": "References of the variable after renaming",
        "type": "SimpleName",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "after",
                "name": "renamed variable"
              }
            ]
          }
        ]
      }
    }
  },
  {
    "name": "Inline Variable",
    "description": "Inlining the value of an variable to its reference, and removing the variable in the same method",
    "tags": ["Inline", "Variable"],
    "before": {
      "inlined code": {
        "description": "Code fragment to be inlined",
        "type": "CodeFragment",
        "required": true
      },
      "inlined variable": {
        "type": "VariableDeclaration",
        "description": "Variable to be removed by the inlining",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "before",
                "name": "inlined code"
              }
            ],
            "element": "VariableDeclaration"
          }
        ]
      },
      "reference": {
        "description": "Reference of the attribute to be replaced by inlined code",
        "type": "SimpleName",
        "required": true
      }
    },
    "after": {
      "inlined code": {
        "description": "Code fragment which was inlined",
        "type": "CodeFragment",
        "required": true
      }
    }
  },
  {
    "name": "Parameterize Variable",
    "description": "",
    "tags": ["Parameterize", "Variable"],
    "before": {
      "target variable": {
        "type": "VariableDeclaration",
        "required": true
      },
      "method": {
        "type": "MethodDeclaration"
      }
    },
    "after": {
      "renamed parameter": {
        "type": "ParameterDeclaration",
        "required": true
      },
      "method": {
        "type": "MethodDeclaration"
      }
    }
  },
  {
    "name": "Rename Parameter",
    "description": "",
    "tags": ["Rename", "Parameter"],
    "before": {
      "target parameter": {
        "type": "ParameterDeclaration",
        "required": true
      },
      "method": {
        "type": "MethodDeclaration"
      },
      "references": {
        "type": "SimpleName",
        "multiple": true
      }
    },
    "after": {
      "renamed parameter": {
        "type": "ParameterDeclaration",
        "required": true
      },
      "method": {
        "type": "MethodDeclaration"
      },
      "references": {
        "type": "SimpleName",
        "multiple": true
      }
    }
  },
  {
    "name": "Move Class",
    "description": "Moving class to the other package",
    "referenceUrl": "https://www.refactoring.com/catalog/moveClass.html",
    "tags": ["Move", "Class"],
    "before": {
      "target class": {
        "description": "Class which is moved",
        "type": "ClassDeclaration",
        "required": true
      },
      "package": {
        "description": "Package in which target class exists",
        "type": "PackageDeclaration",
        "autofills": [
          {
            "type": "Package",
            "follows": [
              {
                "category": "before",
                "name": "target class"
              }
            ]
          }
        ]
      },
      "references": {
        "description": "References of target class",
        "type": "QualifiedName",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "before",
                "name": "target class"
              }
            ]
          }
        ]
      }
    },
    "after": {
      "moved class": {
        "description": "Class which was moved",
        "type": "ClassDeclaration",
        "required": true
      },
      "package": {
        "description": "Package in which moved class exists",
        "type": "PackageDeclaration",
        "autofills": [
          {
            "type": "Package",
            "follows": [
              {
                "category": "after",
                "name": "moved class"
              }
            ]
          }
        ]
      },
      "references": {
        "description": "References of moved class",
        "type": "QualifiedName",
        "multiple": true,
        "autofills": [
          {
            "type": "Reference",
            "follows": [
              {
                "category": "after",
                "name": "moved class"
              }
            ]
          }
        ]
      }
    }
  },
  {
    "name": "Rename Class",
    "description": "",
    "tags": ["Rename", "Class"],
    "before": {
      "target class": {
        "type": "ClassDeclaration",
        "required": true
      }
    },
    "after": {
      "renamed class": {
        "type": "ClassDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Move And Rename Class",
    "description": "",
    "tags": ["Move", "Rename", "Class"],
    "before": {
      "target class": {
        "type": "ClassDeclaration",
        "required": true
      }
    },
    "after": {
      "moved class": {
        "type": "ClassDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Extract Superclass",
    "description": "",
    "tags": ["Extract", "Class"],
    "before": {
      "target class": {
        "type": "ClassDeclaration",
        "required": true
      }
    },
    "after": {
      "extracted class": {
        "type": "ClassDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Extract Interface",
    "description": "",
    "tags": ["Extract", "Interface"],
    "before": {
      "target class": {
        "type": "ClassDeclaration",
        "required": true
      }
    },
    "after": {
      "extracted interface": {
        "type": "InterfaceDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Trim",
    "description": "Removing the \"else\" clause by moving the code in the \"else\" clause to after the \"if\" statement in the case where an escape from the outer block always occurs in the \"then\" clause of an \"if\" statement",
    "referenceUrl": "",
    "tags": ["Trim", "If-Else"],
    "before": {
      "moved code": {
        "description": "Code fragment to be moved from the \"else\" clause",
        "type": "CodeFragment",
        "required": true
      },
      "removed else block": {
        "description": "Block of the \"else\" clause to be removed",
        "type": "Block",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "before",
                "name": "moved code"
              }
            ],
            "element": "Block"
          }
        ]
      }
    },
    "after": {
      "moved code": {
        "description": "Code fragment which was moved from the \"else\" clause",
        "type": "CodeFragment",
        "required": true
      }
    }
  },
  {
    "name": "Trim-INVERSE",
    "description": "Adding the \"else\" clause and moving the code after the \"if\" statement to the \"else\" clause in the case where an escape from the outer block always occurs in the \"then\" clause of an \"if\" statement",
    "referenceUrl": "",
    "tags": ["Trim", "If-Else"],
    "before": {
      "moved code": {
        "description": "Code fragment to be moved to \"else\" clause",
        "type": "CodeFragment",
        "required": true
      }
    },
    "after": {
      "moved code": {
        "description": "Code fragment which was moved to \"else\" clause",
        "type": "CodeFragment",
        "required": true
      },
      "added else block": {
        "description": "Block of the \"else\" clause which was added",
        "type": "Block",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "after",
                "name": "moved code"
              }
            ],
            "element": "Block"
          }
        ]
      }
    }
  },
  {
    "name": "Change Conditional to Switch",
    "description": "Changing a chain of \"if-else\" statements to a \"switch\" statement",
    "referenceUrl": "",
    "tags": ["Change", "If-Else", "Conditional", "Switch"],
    "before": {
      "if-else chain": {
        "description": "Chain of \"if-else\" statements to be changed to a \"switch\" statement",
        "type": "IfStatement",
        "required": true
      },
      "conditionals": {
        "description": "Conditional expressions in the chain of \"if-else\" statements",
        "type": "CodeFragment",
        "required": true,
        "multiple": true
      }
    },
    "after": {
      "switch": {
        "description": "\"switch\" statement which was newly created by the change",
        "type": "SwitchStatement",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "after",
                "name": "conditionals"
              }
            ],
            "element": "SwitchStatement"
          }
        ]
      },
      "conditionals": {
        "description": "Cases of the \"switch\" statements",
        "type": "SwitchCase",
        "required": true,
        "multiple": true
      }
    }
  },
  {
    "name": "Reverse Conditional",
    "description": "Reversing the conditional expression of an \"if\" statement and replacing the \"then\" and \"else\" clauses",
    "referenceUrl": "",
    "tags": ["Reverse", "If-Else", "Conditional"],
    "before": {
      "original conditional": {
        "description": "Conditional expression to be reversed",
        "type": "CodeFragment",
        "required": true
      },
      "block when satisfying original conditional": {
        "description": "Block in the \"then\" clause before reversing that is executed when the conditional before reversing is satisfied",
        "type": "Block",
        "required": true
      },
      "block when unsatisfying original conditional": {
        "description": "Block in the \"else\" clause before reversing that is executed when the conditional before reversing is unsatisfied",
        "type": "Block",
        "required": true
      }
    },
    "after": {
      "reversed conditional": {
        "description": "Conditional expression which was reversed",
        "type": "CodeFragment",
        "required": true
      },
      "block when satisfying original conditional": {
        "description": "Block in the \"else\" clause after reversing that is executed when the conditional before reversing is satisfied",
        "type": "Block",
        "required": true
      },
      "block when unsatisfying original conditional": {
        "description": "Block in the \"then\" clause after reversing that is executed when the conditional before reversing is unsatisfied",
        "type": "Block",
        "required": true
      }
    }
  },
  {
    "name": "Restructure Conditional Expression",
    "description": "Restructuring conditional expressions with equivalent truth values",
    "referenceUrl": "",
    "tags": ["Restructure", "Conditional"],
    "before": {
      "original conditional": {
        "description": "Conditional expression to be restructured",
        "type": "CodeFragment",
        "required": true
      }
    },
    "after": {
      "restructured conditional": {
        "description": "Conditional expression which was restructured",
        "type": "CodeFragment",
        "required": true
      }
    }
  },
  {
    "name": "Introduce Block",
    "description": "Introducing a block of a clause",
    "referenceUrl": "",
    "tags": ["Introduce", "Block"],
    "before": {
      "surrounded code": {
        "description": "Code fragment to be surrounded by introduced block",
        "type": "CodeFragment",
        "required": true
      }
    },
    "after": {
      "introduced block": {
        "description": "Block which was introduced",
        "type": "Block",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "after",
                "name": "surrounded code"
              }
            ],
            "element": "Block"
          }
        ]
      },
      "surrounded code": {
        "description": "Code fragment which was surrounded by introduced block",
        "type": "CodeFragment",
        "required": true
      }
    }
  },
  {
    "name": "Expand Block",
    "description": "Expanding a block of a clause",
    "referenceUrl": "",
    "tags": ["Expand", "Block"],
    "before": {
      "expanded block": {
        "description": "Block to be expanded",
        "type": "Block",
        "required": true,
        "autofills": [
          {
            "type": "Surround",
            "follows": [
              {
                "category": "before",
                "name": "surrounded code"
              }
            ],
            "element": "Block"
          }
        ]
      },
      "surrounded code": {
        "description": "Code fragment which was surrounded by expanded block",
        "type": "CodeFragment"
      }
    },
    "after": {
      "surrounded code": {
        "description": "Code fragment which had been surrounded by expanded block",
        "type": "CodeFragment"
      }
    }
  },
  {
    "name": "Change Method Access Modifier",
    "description": "Changing an access modifier of a method",
    "tags": ["Change", "Modifier", "Method"],
    "before": {
      "changed method": {
        "description": "Method which has an access modifier to be changed",
        "type": "MethodDeclaration",
        "required": true
      }
    },
    "after": {
      "changed method": {
        "description": "Method which has an access modifier which was changed",
        "type": "MethodDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Change Attribute Access Modifier",
    "description": "Changing an access modifier of an attribute",
    "tags": ["Change", "Modifier", "Attribute"],
    "before": {
      "changed attribute": {
        "description": "Attribute which has an access modifier to be changed",
        "type": "FieldDeclaration",
        "required": true
      }
    },
    "after": {
      "changed attribute": {
        "description": "Attribute which has an access modifier which was changed",
        "type": "FieldDeclaration",
        "required": true
      }
    }
  },
  {
    "name": "Change Return Type",
    "description": "",
    "tags": ["Change", "Type", "Return"],
    "before": {
      "target type": {
        "type": "ReturnType",
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    },
    "after": {
      "changed type": {
        "type": "ReturnType",
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    }
  },
  {
    "name": "Change Parameter Type",
    "description": "",
    "tags": ["Change", "Type", "Parameter"],
    "before": {
      "target type": {
        "type": "ParameterType",
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    },
    "after": {
      "changed type": {
        "type": "ParameterType",
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    }
  },
  {
    "name": "Change Variable Type",
    "description": "",
    "tags": ["Change", "Type", "Variable"],
    "before": {
      "target type": {
        "type": "VariableType",
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    },
    "after": {
      "changed type": {
        "type": "VariableType",
        "required": true
      },
      "target method": {
        "type": "MethodDeclaration"
      }
    }
  },
  {
    "name": "Mock Object",
    "description": "A Mock Object is a fake version of a real object used in testing to simulate its behavior. It helps you test a specific piece of code without relying on other parts of the system, like databases or APIs. You can program the mock to return specific values or behave in a controlled way. This lets you focus on testing just the functionality of the code you are working on, making tests more reliable and faster since you're not depending on external systems.",
    "referenceUrl": "http://xunitpatterns.com/Mock%20Object.html",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "Testcase SuperClass",
    "description": "A Testcase Superclass is a parent class that contains shared test setup, teardown methods, or common utility methods used by multiple test classes. By defining these common operations in a superclass, you can avoid code duplication across different test cases. Each subclass (or individual test class) inherits these methods, making the tests easier to maintain and reducing redundancy. This approach simplifies test management when multiple test cases require similar initializations or helper functions, leading to cleaner and more organized test code.",
    "referenceUrl": "http://xunitpatterns.com/Testcase%20Superclass.html",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "Custom Assertion",
    "description": "A Custom Assertion is a specialized test method that checks complex conditions or multiple related checks in a single call. Instead of repeating similar assertions across multiple tests, you create a custom method to perform those checks, simplifying test code and improving readability. This approach ensures that the tests remain clear and maintainable, and any changes to the assertion logic can be updated in one place. It also allows for better error messages tailored to specific conditions, enhancing debugging.",
    "referenceUrl": "http://xunitpatterns.com/Custom%20Assertion.html#Verification%20Method",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "Creation Method",
    "description": "Using a creation method to handle setup logic, allowing the refactoring of fixture setup code for better reusability and clarity. This reduces duplication across tests and makes setup processes more maintainable.",
    "referenceUrl": "http://xunitpatterns.com/Creation%20Method.html",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "Implicit Setup",
    "description": "A setup method is one marked with @Before or @BeforeClass, which runs before each test method to handle fixture setup. This is called Implicit Setup, as the setup occurs automatically. In unit tests using the Enclosed test runner, implicit setup is beneficial because it clarifies the test group's preconditions and improves test structure, making it easier to understand what conditions the tests depend on.",
    "referenceUrl": "http://xunitpatterns.com/Implicit%20Setup.html",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "SuiteFixture Setup",
    "description": "A setup method is one marked with @Before or @BeforeClass, which runs before each test method to handle fixture setup. This is called Implicit Setup, as the setup occurs automatically. In unit tests using the Enclosed test runner, implicit setup is beneficial because it clarifies the test group's preconditions and improves test structure, making it easier to understand what conditions the tests depend on.",
    "referenceUrl": "http://xunitpatterns.com/Implicit%20Setup.html",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "Inline Setup",
    "description": "Inline Setup is a test pattern where setup code is placed directly inside each test method. It keeps the setup and test logic together, making it easier to understand small, specific tests.",
    "referenceUrl": "http://xunitpatterns.com/Inline%20Setup.html",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "Cleanup Method",
    "description": "A Cleanup Method is used to release resources that might remain allocated after a test ends, such as files, database connections, or network sockets. It runs during the teardown phase to ensure that the test environment is restored to its original state. Unlike typical teardown methods that run implicitly, Cleanup Methods are explicitly defined to handle complex resource cleanup. This prevents resource leaks and ensures that subsequent tests run in a clean environment, improving test reliability and maintainability. ",
    "referenceUrl": "http://xunitpatterns.com/Test%20Utility%20Method.html#:~:text=Variation%3A%20Cleanup%20Method,discussion%20and%20examples",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  },
  {
    "name": "Test Helper",
    "description": "The Test Helper is a pattern designed to simplify and make test code reusable. It is primarily used to consolidate utility methods and logic that are commonly shared across multiple test case classes.",
    "referenceUrl": "http://xunitpatterns.com/Test%20Helper.html",
    "before": {
      "removed codes": {
        "description": "Code fragments to be removed",
        "type": "CodeFragment",
        "multiple": true
      }
    },
    "after": {
      "added codes": {
        "description": "Code fragments which were added",
        "type": "CodeFragment",
        "multiple": true
      }
    }
  }
]
